---
import { translations } from '../../i18n/translations';
import type { LanguageCode } from '../../i18n/constants';

interface Props {
  language: string;
}

const { language } = Astro.props;
const t = translations[language as LanguageCode] || translations.en;
---

<div id="search-dialog" class="fixed inset-0 z-50 hidden">
  <div class="absolute inset-0 bg-black/50 backdrop-blur-sm"></div>
  
  <div class="relative mx-auto max-w-3xl mt-20 px-4">
    <div class="bg-[var(--color-bg-base)] rounded-lg shadow-xl border border-[var(--color-border)]">
      <!-- Search Input -->
      <div class="p-4 border-b border-[var(--color-border)]">
        <div class="relative">
          <input
            type="text"
            id="search-input"
            class="w-full px-4 py-2 pl-10 bg-[var(--color-bg-offset)] border border-[var(--color-border)] rounded-md focus:outline-none focus:ring-2 focus:ring-[var(--color-accent)]"
            placeholder={t.search?.placeholder || 'Search...'}
            autocomplete="off"
            spellcheck="false"
          />
          <svg class="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-[var(--color-text-offset)]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
          <div id="search-loading" class="absolute right-3 top-1/2 -translate-y-1/2 hidden">
            <svg class="animate-spin h-5 w-5 text-[var(--color-text-offset)]" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          </div>
        </div>
      </div>
      
      <!-- Search Results -->
      <div id="search-results" class="p-4 max-h-[60vh] overflow-y-auto">
        <!-- Results will be dynamically inserted here -->
      </div>
    </div>
  </div>
</div>

<script>
  import { searchContent } from '../../utils/search';
  
  const dialog = document.getElementById('search-dialog');
  const input = document.getElementById('search-input') as HTMLInputElement;
  const results = document.getElementById('search-results');
  const loading = document.getElementById('search-loading');
  
  // Get current language from URL
  const language = window.location.pathname.split('/')[1] || 'de';
  
  // Open search dialog with keyboard shortcut
  document.addEventListener('keydown', (e) => {
    if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
      e.preventDefault();
      openSearch();
    }
    if (e.key === 'Escape' && dialog?.classList.contains('block')) {
      closeSearch();
    }
  });
  
  // Close dialog when clicking outside
  dialog?.addEventListener('click', (e) => {
    if (e.target === dialog) {
      closeSearch();
    }
  });
  
  // Handle search input
  let debounceTimeout: number;
  input?.addEventListener('input', (e) => {
    const query = (e.target as HTMLInputElement).value;
    clearTimeout(debounceTimeout);
    debounceTimeout = window.setTimeout(() => {
      performSearch(query);
    }, 200);
  });
  
  function openSearch() {
    dialog?.classList.remove('hidden');
    dialog?.classList.add('block');
    input?.focus();
  }
  
  function closeSearch() {
    dialog?.classList.remove('block');
    dialog?.classList.add('hidden');
    input.value = '';
    if (results) results.innerHTML = '';
  }
  
  async function performSearch(query: string) {
    if (!results || query.length < 2) {
      if (results) results.innerHTML = '';
      return;
    }
    
    // Show loading indicator
    loading?.classList.remove('hidden');
    
    try {
      const searchResults = await searchContent(query, language);
      
      results.innerHTML = searchResults.length
        ? searchResults
            .map(
              (result) => `
                <a href="${result.url}" class="block p-4 hover:bg-[var(--color-bg-offset)] rounded-lg">
                  <div class="font-medium">${result.title}</div>
                  <div class="text-sm text-[var(--color-text-offset)]">${result.description}</div>
                </a>
              `
            )
            .join('')
        : `<div class="text-center text-[var(--color-text-offset)] py-8">No results found</div>`;
    } catch (error) {
      console.error('Search error:', error);
      results.innerHTML = `<div class="text-center text-[var(--color-error)] py-8">An error occurred while searching</div>`;
    } finally {
      // Hide loading indicator
      loading?.classList.add('hidden');
    }
  }
</script>

<style>
  #search-dialog {
    animation: fadeIn 0.15s ease-out;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
</style>
